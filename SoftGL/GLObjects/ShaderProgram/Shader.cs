using Microsoft.CSharp;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Reflection;
using System.Text;

namespace SoftGL
{
    abstract class Shader
    {
        public static Shader Create(ShaderType type, uint id)
        {
            Shader result = null;
            switch (type)
            {
                case ShaderType.VertexShader: result = new VertexShader(id); break;
                case ShaderType.TessControlShader: result = new TessControlShader(id); break;
                case ShaderType.TessEvaluationShader: result = new TessEvaluationShader(id); break;
                case ShaderType.GeometryShader: result = new GeometryShader(id); break;
                case ShaderType.FragmentShader: result = new FragmentShader(id); break;
                case ShaderType.ComputeShader: result = new ComputeShader(id); break;
                default:
                    throw new NotImplementedException();
            }

            return result;
        }

        protected CompilerResults compilerResults;
        protected Dictionary<string, UniformVariable> uniformVariableDict;
        protected string infoLog = string.Empty;

        /// <summary>
        /// 
        /// </summary>
        public ShaderType ShaderType { get; private set; }

        /// <summary>
        /// name generated by glCreateShader().
        /// </summary>
        public uint Id { get; private set; }

        /// <summary>
        /// 
        /// </summary>
        public string Code { get; set; }

        /// <summary>
        /// Creates a program object.
        /// </summary>
        /// <param name="shaderType"></param>
        /// <param name="id"></param>
        public Shader(ShaderType shaderType, uint id)
        {
            this.ShaderType = shaderType;
            this.Id = id;
        }

        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return string.Format("Shader: Id:{0}", this.Id);
        }

        protected abstract string AfterCompile(Assembly assembly);
        public void Compile()
        {
            var codeProvider = new CSharpCodeProvider();
            var compParameters = new CompilerParameters();
            CompilerResults res = codeProvider.CompileAssemblyFromSource(compParameters, this.Code);
            if (res.Errors.Count > 0)
            {
                this.infoLog = DumpLog(res);
            }
            else
            {
                this.compilerResults = res;

                this.infoLog = AfterCompile(res.CompiledAssembly);
            }
        }

        protected string FindUniformVariables(Type shaderCodeType, out Dictionary<string, UniformVariable> dict)
        {
            dict = new Dictionary<string, UniformVariable>();
            uint nextLoc = 0;
            foreach (var item in shaderCodeType.GetFields(BindingFlags.Public | BindingFlags.NonPublic | BindingFlags.Instance))
            {
                object[] inAttribute = item.GetCustomAttributes(typeof(UniformAttribute), false);
                if (inAttribute != null && inAttribute.Length > 0) // this is a 'in ...;' field.
                {
                    var v = new UniformVariable(item);
                    object[] locationAttribute = item.GetCustomAttributes(typeof(LocationAttribute), false);
                    if (locationAttribute != null && locationAttribute.Length > 0) // (location = ..) in ...;
                    {
                        uint loc = (locationAttribute[0] as LocationAttribute).location;
                        if (loc < nextLoc) { return string.Format("location error in {0}!", this.GetType().Name); }
                        v.location = loc;
                        nextLoc = loc + 1;
                    }
                    else
                    {
                        v.location = nextLoc++;
                    }
                    dict.Add(item.Name, v);
                }
            }

            return string.Empty;
        }

        protected Type FindShaderCodeType(Assembly assembly, Type shaderCodeType)
        {
            Type result = null;
            Type[] types = assembly.GetTypes();
            foreach (var item in types)
            {
                if (item.BaseType == shaderCodeType)
                {
                    result = item;
                    break;
                }
            }

            return result;
        }

        public void GetShaderStatus(ShaderStatus pname, int[] pValues)
        {
            if (pValues == null || pValues.Length < 1) { return; }

            switch (pname)
            {
                case ShaderStatus.ShaderType:
                    pValues[0] = (int)this.ShaderType;
                    break;
                case ShaderStatus.DeleteStatus:
                    throw new NotImplementedException();
                case ShaderStatus.CompileStatus:
                    pValues[0] = this.infoLog.Length == 0 ? (int)GL.GL_TRUE : (int)GL.GL_FALSE;
                    break;
                case ShaderStatus.InfoLogLength:
                    pValues[0] = this.infoLog.Length;
                    break;
                case ShaderStatus.ShaderSourceLength:
                    string code = this.Code;
                    if (code == null) { pValues[0] = 0; }
                    else { pValues[0] = code.Length; }
                    break;
                default:
                    throw new NotImplementedException();
            }
        }

        protected string DumpLog(CompilerResults res)
        {
            var builder = new StringBuilder();
            if (res != null)
                foreach (var item in res.Errors)
                {
                    builder.AppendLine(item.ToString());
                }

            return builder.ToString();
        }

    }
}
