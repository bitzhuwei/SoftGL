using Microsoft.CSharp;
using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace SoftGL
{
    class Shader
    {
        private CompilerResults CompilingResult;
        /// <summary>
        /// 
        /// </summary>
        public ShaderType ShaderType { get; private set; }

        /// <summary>
        /// name generated by glCreateShader().
        /// </summary>
        public uint Id { get; private set; }

        /// <summary>
        /// 
        /// </summary>
        public string Code { get; set; }

        /// <summary>
        /// Creates a program object.
        /// </summary>
        /// <param name="shaderType"></param>
        /// <param name="id"></param>
        public Shader(ShaderType shaderType, uint id)
        {
            this.ShaderType = shaderType;
            this.Id = id;
        }

        /// <summary>
        ///
        /// </summary>
        /// <returns></returns>
        public override string ToString()
        {
            return string.Format("Shader: Id:{0}", this.Id);
        }

        public void Compile()
        {
            var codeProvider = new CSharpCodeProvider();
            var compParameters = new CompilerParameters();
            CompilerResults res = codeProvider.CompileAssemblyFromSource(compParameters, this.Code);
            this.CompilingResult = res;
            // how to use res:
            //// Create a new instance of the class 'MyClass'　　　　// 有命名空间的，需要命名空间.类名
            //object myClass = res.CompiledAssembly.CreateInstance("MyClass");

            //// Call the method 'PrintConsole' with the parameter 'Hello World'
            //// "Hello World" will be written in console
            //myClass.GetType().GetMethod("PrintConsole").Invoke(myClass, new object[] { "Hello World" });
        }
    }
}
